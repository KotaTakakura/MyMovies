// Code generated by MockGen. DO NOT EDIT.
// Source: domain/service/PlayList/IPlayListService.go

// Package mock_domain_service is a generated GoMock package.
package mock_domain_service

import (
	model "MyPIPE/domain/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIPlayListService is a mock of IPlayListService interface
type MockIPlayListService struct {
	ctrl     *gomock.Controller
	recorder *MockIPlayListServiceMockRecorder
}

// MockIPlayListServiceMockRecorder is the mock recorder for MockIPlayListService
type MockIPlayListServiceMockRecorder struct {
	mock *MockIPlayListService
}

// NewMockIPlayListService creates a new mock instance
func NewMockIPlayListService(ctrl *gomock.Controller) *MockIPlayListService {
	mock := &MockIPlayListService{ctrl: ctrl}
	mock.recorder = &MockIPlayListServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIPlayListService) EXPECT() *MockIPlayListServiceMockRecorder {
	return m.recorder
}

// CanAddItem mocks base method
func (m *MockIPlayListService) CanAddItem(movieId model.MovieID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanAddItem", movieId)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanAddItem indicates an expected call of CanAddItem
func (mr *MockIPlayListServiceMockRecorder) CanAddItem(movieId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanAddItem", reflect.TypeOf((*MockIPlayListService)(nil).CanAddItem), movieId)
}
