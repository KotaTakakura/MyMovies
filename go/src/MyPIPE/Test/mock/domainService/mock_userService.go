// Code generated by MockGen. DO NOT EDIT.
// Source: domain/service/User/IUserService.go

// Package mock_domain_service is a generated GoMock package.
package mock_domain_service

import (
	model "MyPIPE/domain/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIUserService is a mock of IUserService interface
type MockIUserService struct {
	ctrl     *gomock.Controller
	recorder *MockIUserServiceMockRecorder
}

// MockIUserServiceMockRecorder is the mock recorder for MockIUserService
type MockIUserServiceMockRecorder struct {
	mock *MockIUserService
}

// NewMockIUserService creates a new mock instance
func NewMockIUserService(ctrl *gomock.Controller) *MockIUserService {
	mock := &MockIUserService{ctrl: ctrl}
	mock.recorder = &MockIUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIUserService) EXPECT() *MockIUserServiceMockRecorder {
	return m.recorder
}

// CheckNameExists mocks base method
func (m *MockIUserService) CheckNameExists(userName model.UserName) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckNameExists", userName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckNameExists indicates an expected call of CheckNameExists
func (mr *MockIUserServiceMockRecorder) CheckNameExists(userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckNameExists", reflect.TypeOf((*MockIUserService)(nil).CheckNameExists), userName)
}
