// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/queryService/UploadedMovies/UploadedMovies.go

// Package mock_queryService is a generated GoMock package.
package mock_queryService

import (
	model "MyPIPE/domain/model"
	queryService "MyPIPE/domain/queryService/UploadedMovies"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUploadedMovies is a mock of UploadedMovies interface
type MockUploadedMovies struct {
	ctrl     *gomock.Controller
	recorder *MockUploadedMoviesMockRecorder
}

// MockUploadedMoviesMockRecorder is the mock recorder for MockUploadedMovies
type MockUploadedMoviesMockRecorder struct {
	mock *MockUploadedMovies
}

// NewMockUploadedMovies creates a new mock instance
func NewMockUploadedMovies(ctrl *gomock.Controller) *MockUploadedMovies {
	mock := &MockUploadedMovies{ctrl: ctrl}
	mock.recorder = &MockUploadedMoviesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUploadedMovies) EXPECT() *MockUploadedMoviesMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockUploadedMovies) Get(userId model.UserID) []queryService.UploadedMoviesDTO {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", userId)
	ret0, _ := ret[0].([]queryService.UploadedMoviesDTO)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockUploadedMoviesMockRecorder) Get(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUploadedMovies)(nil).Get), userId)
}
