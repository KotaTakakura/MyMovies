// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/queryService/GetLoggedInUserData.go

// Package mock_queryService is a generated GoMock package.
package mock_queryService

import (
	model "MyPIPE/domain/model"
	queryService "MyPIPE/domain/queryService"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockGetLoggedInUserDataQueryService is a mock of GetLoggedInUserDataQueryService interface
type MockGetLoggedInUserDataQueryService struct {
	ctrl     *gomock.Controller
	recorder *MockGetLoggedInUserDataQueryServiceMockRecorder
}

// MockGetLoggedInUserDataQueryServiceMockRecorder is the mock recorder for MockGetLoggedInUserDataQueryService
type MockGetLoggedInUserDataQueryServiceMockRecorder struct {
	mock *MockGetLoggedInUserDataQueryService
}

// NewMockGetLoggedInUserDataQueryService creates a new mock instance
func NewMockGetLoggedInUserDataQueryService(ctrl *gomock.Controller) *MockGetLoggedInUserDataQueryService {
	mock := &MockGetLoggedInUserDataQueryService{ctrl: ctrl}
	mock.recorder = &MockGetLoggedInUserDataQueryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGetLoggedInUserDataQueryService) EXPECT() *MockGetLoggedInUserDataQueryServiceMockRecorder {
	return m.recorder
}

// FindByUserId mocks base method
func (m *MockGetLoggedInUserDataQueryService) FindByUserId(userId model.UserID) *queryService.GetLoggedInUserDataDTO {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", userId)
	ret0, _ := ret[0].(*queryService.GetLoggedInUserDataDTO)
	return ret0
}

// FindByUserId indicates an expected call of FindByUserId
func (mr *MockGetLoggedInUserDataQueryServiceMockRecorder) FindByUserId(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockGetLoggedInUserDataQueryService)(nil).FindByUserId), userId)
}
