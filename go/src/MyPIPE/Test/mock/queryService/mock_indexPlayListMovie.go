// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/queryService/IndexPlayListMovie.go

// Package mock_queryService is a generated GoMock package.
package mock_queryService

import (
	model "MyPIPE/domain/model"
	queryService "MyPIPE/domain/queryService"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIndexPlayListMovieQueryService is a mock of IndexPlayListMovieQueryService interface
type MockIndexPlayListMovieQueryService struct {
	ctrl     *gomock.Controller
	recorder *MockIndexPlayListMovieQueryServiceMockRecorder
}

// MockIndexPlayListMovieQueryServiceMockRecorder is the mock recorder for MockIndexPlayListMovieQueryService
type MockIndexPlayListMovieQueryServiceMockRecorder struct {
	mock *MockIndexPlayListMovieQueryService
}

// NewMockIndexPlayListMovieQueryService creates a new mock instance
func NewMockIndexPlayListMovieQueryService(ctrl *gomock.Controller) *MockIndexPlayListMovieQueryService {
	mock := &MockIndexPlayListMovieQueryService{ctrl: ctrl}
	mock.recorder = &MockIndexPlayListMovieQueryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIndexPlayListMovieQueryService) EXPECT() *MockIndexPlayListMovieQueryServiceMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockIndexPlayListMovieQueryService) Find(userId model.UserID, playListId model.PlayListID) *queryService.IndexPlayListMovieInMyPageDTO {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", userId, playListId)
	ret0, _ := ret[0].(*queryService.IndexPlayListMovieInMyPageDTO)
	return ret0
}

// Find indicates an expected call of Find
func (mr *MockIndexPlayListMovieQueryServiceMockRecorder) Find(userId, playListId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockIndexPlayListMovieQueryService)(nil).Find), userId, playListId)
}
