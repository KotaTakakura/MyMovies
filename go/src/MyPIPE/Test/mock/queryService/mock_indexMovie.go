// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/queryService/IndexMovie.go

// Package mock_queryService is a generated GoMock package.
package mock_queryService

import (
	queryService "MyPIPE/domain/queryService"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIndexMovieQueryService is a mock of IndexMovieQueryService interface
type MockIndexMovieQueryService struct {
	ctrl     *gomock.Controller
	recorder *MockIndexMovieQueryServiceMockRecorder
}

// MockIndexMovieQueryServiceMockRecorder is the mock recorder for MockIndexMovieQueryService
type MockIndexMovieQueryServiceMockRecorder struct {
	mock *MockIndexMovieQueryService
}

// NewMockIndexMovieQueryService creates a new mock instance
func NewMockIndexMovieQueryService(ctrl *gomock.Controller) *MockIndexMovieQueryService {
	mock := &MockIndexMovieQueryService{ctrl: ctrl}
	mock.recorder = &MockIndexMovieQueryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIndexMovieQueryService) EXPECT() *MockIndexMovieQueryServiceMockRecorder {
	return m.recorder
}

// Search mocks base method
func (m *MockIndexMovieQueryService) Search(page queryService.IndexMovieQueryServicePage, keyWord string, order queryService.IndexMovieQueryServiceOrder) queryService.IndexMovieDTO {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", page, keyWord, order)
	ret0, _ := ret[0].(queryService.IndexMovieDTO)
	return ret0
}

// Search indicates an expected call of Search
func (mr *MockIndexMovieQueryServiceMockRecorder) Search(page, keyWord, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockIndexMovieQueryService)(nil).Search), page, keyWord, order)
}

// All mocks base method
func (m *MockIndexMovieQueryService) All(page queryService.IndexMovieQueryServicePage, order queryService.IndexMovieQueryServiceOrder) queryService.IndexMovieDTO {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", page, order)
	ret0, _ := ret[0].(queryService.IndexMovieDTO)
	return ret0
}

// All indicates an expected call of All
func (mr *MockIndexMovieQueryServiceMockRecorder) All(page, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockIndexMovieQueryService)(nil).All), page, order)
}
