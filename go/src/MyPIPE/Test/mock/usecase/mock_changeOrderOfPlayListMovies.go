// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/ChangeOrderOfPlayListMovies.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	usecase "MyPIPE/usecase"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIChangeOrderOfPlayListMovies is a mock of IChangeOrderOfPlayListMovies interface
type MockIChangeOrderOfPlayListMovies struct {
	ctrl     *gomock.Controller
	recorder *MockIChangeOrderOfPlayListMoviesMockRecorder
}

// MockIChangeOrderOfPlayListMoviesMockRecorder is the mock recorder for MockIChangeOrderOfPlayListMovies
type MockIChangeOrderOfPlayListMoviesMockRecorder struct {
	mock *MockIChangeOrderOfPlayListMovies
}

// NewMockIChangeOrderOfPlayListMovies creates a new mock instance
func NewMockIChangeOrderOfPlayListMovies(ctrl *gomock.Controller) *MockIChangeOrderOfPlayListMovies {
	mock := &MockIChangeOrderOfPlayListMovies{ctrl: ctrl}
	mock.recorder = &MockIChangeOrderOfPlayListMoviesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIChangeOrderOfPlayListMovies) EXPECT() *MockIChangeOrderOfPlayListMoviesMockRecorder {
	return m.recorder
}

// ChangeOrderOfPlayListMovies mocks base method
func (m *MockIChangeOrderOfPlayListMovies) ChangeOrderOfPlayListMovies(changeOrderOfPlayListMoviesDTO *usecase.ChangeOrderOfPlayListMoviesDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeOrderOfPlayListMovies", changeOrderOfPlayListMoviesDTO)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeOrderOfPlayListMovies indicates an expected call of ChangeOrderOfPlayListMovies
func (mr *MockIChangeOrderOfPlayListMoviesMockRecorder) ChangeOrderOfPlayListMovies(changeOrderOfPlayListMoviesDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeOrderOfPlayListMovies", reflect.TypeOf((*MockIChangeOrderOfPlayListMovies)(nil).ChangeOrderOfPlayListMovies), changeOrderOfPlayListMoviesDTO)
}
