// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/IndexMovie.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	queryService "MyPIPE/domain/queryService"
	usecase "MyPIPE/usecase"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIIndexMovie is a mock of IIndexMovie interface
type MockIIndexMovie struct {
	ctrl     *gomock.Controller
	recorder *MockIIndexMovieMockRecorder
}

// MockIIndexMovieMockRecorder is the mock recorder for MockIIndexMovie
type MockIIndexMovieMockRecorder struct {
	mock *MockIIndexMovie
}

// NewMockIIndexMovie creates a new mock instance
func NewMockIIndexMovie(ctrl *gomock.Controller) *MockIIndexMovie {
	mock := &MockIIndexMovie{ctrl: ctrl}
	mock.recorder = &MockIIndexMovieMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIIndexMovie) EXPECT() *MockIIndexMovieMockRecorder {
	return m.recorder
}

// Search mocks base method
func (m *MockIIndexMovie) Search(indexMovieSearchDTO *usecase.IndexMovieSearchDTO) queryService.IndexMovieDTO {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", indexMovieSearchDTO)
	ret0, _ := ret[0].(queryService.IndexMovieDTO)
	return ret0
}

// Search indicates an expected call of Search
func (mr *MockIIndexMovieMockRecorder) Search(indexMovieSearchDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockIIndexMovie)(nil).Search), indexMovieSearchDTO)
}
