// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/PostMovie.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	model "MyPIPE/domain/model"
	usecase "MyPIPE/usecase"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIPostMovie is a mock of IPostMovie interface
type MockIPostMovie struct {
	ctrl     *gomock.Controller
	recorder *MockIPostMovieMockRecorder
}

// MockIPostMovieMockRecorder is the mock recorder for MockIPostMovie
type MockIPostMovieMockRecorder struct {
	mock *MockIPostMovie
}

// NewMockIPostMovie creates a new mock instance
func NewMockIPostMovie(ctrl *gomock.Controller) *MockIPostMovie {
	mock := &MockIPostMovie{ctrl: ctrl}
	mock.recorder = &MockIPostMovieMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIPostMovie) EXPECT() *MockIPostMovieMockRecorder {
	return m.recorder
}

// PostMovie mocks base method
func (m *MockIPostMovie) PostMovie(postMovieDTO *usecase.PostMovieDTO) (*model.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostMovie", postMovieDTO)
	ret0, _ := ret[0].(*model.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostMovie indicates an expected call of PostMovie
func (mr *MockIPostMovieMockRecorder) PostMovie(postMovieDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostMovie", reflect.TypeOf((*MockIPostMovie)(nil).PostMovie), postMovieDTO)
}
