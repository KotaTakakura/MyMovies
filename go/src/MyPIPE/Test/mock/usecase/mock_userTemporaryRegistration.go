// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/UserTemporaryRegistration.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	model "MyPIPE/domain/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIUserTemporaryRegistration is a mock of IUserTemporaryRegistration interface
type MockIUserTemporaryRegistration struct {
	ctrl     *gomock.Controller
	recorder *MockIUserTemporaryRegistrationMockRecorder
}

// MockIUserTemporaryRegistrationMockRecorder is the mock recorder for MockIUserTemporaryRegistration
type MockIUserTemporaryRegistrationMockRecorder struct {
	mock *MockIUserTemporaryRegistration
}

// NewMockIUserTemporaryRegistration creates a new mock instance
func NewMockIUserTemporaryRegistration(ctrl *gomock.Controller) *MockIUserTemporaryRegistration {
	mock := &MockIUserTemporaryRegistration{ctrl: ctrl}
	mock.recorder = &MockIUserTemporaryRegistrationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIUserTemporaryRegistration) EXPECT() *MockIUserTemporaryRegistrationMockRecorder {
	return m.recorder
}

// TemporaryRegister mocks base method
func (m *MockIUserTemporaryRegistration) TemporaryRegister(user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemporaryRegister", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// TemporaryRegister indicates an expected call of TemporaryRegister
func (mr *MockIUserTemporaryRegistrationMockRecorder) TemporaryRegister(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemporaryRegister", reflect.TypeOf((*MockIUserTemporaryRegistration)(nil).TemporaryRegister), user)
}
