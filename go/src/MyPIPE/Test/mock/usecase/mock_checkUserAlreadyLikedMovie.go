// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/CheckUserAlreadyLikedMovie.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	usecase "MyPIPE/usecase"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockICheckUserAlreadyLikedMovie is a mock of ICheckUserAlreadyLikedMovie interface
type MockICheckUserAlreadyLikedMovie struct {
	ctrl     *gomock.Controller
	recorder *MockICheckUserAlreadyLikedMovieMockRecorder
}

// MockICheckUserAlreadyLikedMovieMockRecorder is the mock recorder for MockICheckUserAlreadyLikedMovie
type MockICheckUserAlreadyLikedMovieMockRecorder struct {
	mock *MockICheckUserAlreadyLikedMovie
}

// NewMockICheckUserAlreadyLikedMovie creates a new mock instance
func NewMockICheckUserAlreadyLikedMovie(ctrl *gomock.Controller) *MockICheckUserAlreadyLikedMovie {
	mock := &MockICheckUserAlreadyLikedMovie{ctrl: ctrl}
	mock.recorder = &MockICheckUserAlreadyLikedMovieMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockICheckUserAlreadyLikedMovie) EXPECT() *MockICheckUserAlreadyLikedMovieMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockICheckUserAlreadyLikedMovie) Find(checkUserAlreadyLikedMovieFindDTO *usecase.CheckUserAlreadyLikedMovieFindDTO) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", checkUserAlreadyLikedMovieFindDTO)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Find indicates an expected call of Find
func (mr *MockICheckUserAlreadyLikedMovieMockRecorder) Find(checkUserAlreadyLikedMovieFindDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockICheckUserAlreadyLikedMovie)(nil).Find), checkUserAlreadyLikedMovieFindDTO)
}
