// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/GetMovieAndComments.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	queryService "MyPIPE/domain/queryService"
	usecase "MyPIPE/usecase"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIGetMovieAndComments is a mock of IGetMovieAndComments interface
type MockIGetMovieAndComments struct {
	ctrl     *gomock.Controller
	recorder *MockIGetMovieAndCommentsMockRecorder
}

// MockIGetMovieAndCommentsMockRecorder is the mock recorder for MockIGetMovieAndComments
type MockIGetMovieAndCommentsMockRecorder struct {
	mock *MockIGetMovieAndComments
}

// NewMockIGetMovieAndComments creates a new mock instance
func NewMockIGetMovieAndComments(ctrl *gomock.Controller) *MockIGetMovieAndComments {
	mock := &MockIGetMovieAndComments{ctrl: ctrl}
	mock.recorder = &MockIGetMovieAndCommentsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIGetMovieAndComments) EXPECT() *MockIGetMovieAndCommentsMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockIGetMovieAndComments) Get(getDTO *usecase.MovieAndGetCommentsDTO) queryService.FindByMovieIdDTO {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", getDTO)
	ret0, _ := ret[0].(queryService.FindByMovieIdDTO)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockIGetMovieAndCommentsMockRecorder) Get(getDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIGetMovieAndComments)(nil).Get), getDTO)
}
