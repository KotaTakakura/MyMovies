// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/ChangeUserName.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	usecase "MyPIPE/usecase"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIChangeUserName is a mock of IChangeUserName interface
type MockIChangeUserName struct {
	ctrl     *gomock.Controller
	recorder *MockIChangeUserNameMockRecorder
}

// MockIChangeUserNameMockRecorder is the mock recorder for MockIChangeUserName
type MockIChangeUserNameMockRecorder struct {
	mock *MockIChangeUserName
}

// NewMockIChangeUserName creates a new mock instance
func NewMockIChangeUserName(ctrl *gomock.Controller) *MockIChangeUserName {
	mock := &MockIChangeUserName{ctrl: ctrl}
	mock.recorder = &MockIChangeUserNameMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIChangeUserName) EXPECT() *MockIChangeUserNameMockRecorder {
	return m.recorder
}

// ChangeUserName mocks base method
func (m *MockIChangeUserName) ChangeUserName(changeUserNameDTO *usecase.ChangeUserNameDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserName", changeUserNameDTO)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserName indicates an expected call of ChangeUserName
func (mr *MockIChangeUserNameMockRecorder) ChangeUserName(changeUserNameDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserName", reflect.TypeOf((*MockIChangeUserName)(nil).ChangeUserName), changeUserNameDTO)
}
