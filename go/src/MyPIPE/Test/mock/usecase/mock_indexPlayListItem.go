// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/IndexPlayListItem.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	queryService "MyPIPE/domain/queryService"
	usecase "MyPIPE/usecase"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIIndexPlaylistItemInMyPage is a mock of IIndexPlaylistItemInMyPage interface
type MockIIndexPlaylistItemInMyPage struct {
	ctrl     *gomock.Controller
	recorder *MockIIndexPlaylistItemInMyPageMockRecorder
}

// MockIIndexPlaylistItemInMyPageMockRecorder is the mock recorder for MockIIndexPlaylistItemInMyPage
type MockIIndexPlaylistItemInMyPageMockRecorder struct {
	mock *MockIIndexPlaylistItemInMyPage
}

// NewMockIIndexPlaylistItemInMyPage creates a new mock instance
func NewMockIIndexPlaylistItemInMyPage(ctrl *gomock.Controller) *MockIIndexPlaylistItemInMyPage {
	mock := &MockIIndexPlaylistItemInMyPage{ctrl: ctrl}
	mock.recorder = &MockIIndexPlaylistItemInMyPageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIIndexPlaylistItemInMyPage) EXPECT() *MockIIndexPlaylistItemInMyPageMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockIIndexPlaylistItemInMyPage) Find(indexPlayListMoviesInMyPageDTO usecase.IndexPlayListItemInMyPageDTO) *queryService.IndexPlayListMovieInMyPageDTO {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", indexPlayListMoviesInMyPageDTO)
	ret0, _ := ret[0].(*queryService.IndexPlayListMovieInMyPageDTO)
	return ret0
}

// Find indicates an expected call of Find
func (mr *MockIIndexPlaylistItemInMyPageMockRecorder) Find(indexPlayListMoviesInMyPageDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockIIndexPlaylistItemInMyPage)(nil).Find), indexPlayListMoviesInMyPageDTO)
}
