// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/UploadedMovies.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	model "MyPIPE/domain/model"
	queryService "MyPIPE/domain/queryService/UploadedMovies"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIUploadedMovies is a mock of IUploadedMovies interface
type MockIUploadedMovies struct {
	ctrl     *gomock.Controller
	recorder *MockIUploadedMoviesMockRecorder
}

// MockIUploadedMoviesMockRecorder is the mock recorder for MockIUploadedMovies
type MockIUploadedMoviesMockRecorder struct {
	mock *MockIUploadedMovies
}

// NewMockIUploadedMovies creates a new mock instance
func NewMockIUploadedMovies(ctrl *gomock.Controller) *MockIUploadedMovies {
	mock := &MockIUploadedMovies{ctrl: ctrl}
	mock.recorder = &MockIUploadedMoviesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIUploadedMovies) EXPECT() *MockIUploadedMoviesMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockIUploadedMovies) Get(userId model.UserID) []queryService.UploadedMoviesDTO {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", userId)
	ret0, _ := ret[0].([]queryService.UploadedMoviesDTO)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockIUploadedMoviesMockRecorder) Get(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIUploadedMovies)(nil).Get), userId)
}
