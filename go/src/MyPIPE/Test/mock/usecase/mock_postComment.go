// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/PostComment.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	model "MyPIPE/domain/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIPostComment is a mock of IPostComment interface
type MockIPostComment struct {
	ctrl     *gomock.Controller
	recorder *MockIPostCommentMockRecorder
}

// MockIPostCommentMockRecorder is the mock recorder for MockIPostComment
type MockIPostCommentMockRecorder struct {
	mock *MockIPostComment
}

// NewMockIPostComment creates a new mock instance
func NewMockIPostComment(ctrl *gomock.Controller) *MockIPostComment {
	mock := &MockIPostComment{ctrl: ctrl}
	mock.recorder = &MockIPostCommentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIPostComment) EXPECT() *MockIPostCommentMockRecorder {
	return m.recorder
}

// PostComment mocks base method
func (m *MockIPostComment) PostComment(comment model.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostComment", comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostComment indicates an expected call of PostComment
func (mr *MockIPostCommentMockRecorder) PostComment(comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostComment", reflect.TypeOf((*MockIPostComment)(nil).PostComment), comment)
}
