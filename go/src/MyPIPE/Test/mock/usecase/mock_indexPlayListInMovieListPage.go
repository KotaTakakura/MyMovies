// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/IndexPlayListInMovieListPage.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	queryService "MyPIPE/domain/queryService"
	usecase "MyPIPE/usecase"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIIndexPlayListInMovieListPage is a mock of IIndexPlayListInMovieListPage interface
type MockIIndexPlayListInMovieListPage struct {
	ctrl     *gomock.Controller
	recorder *MockIIndexPlayListInMovieListPageMockRecorder
}

// MockIIndexPlayListInMovieListPageMockRecorder is the mock recorder for MockIIndexPlayListInMovieListPage
type MockIIndexPlayListInMovieListPageMockRecorder struct {
	mock *MockIIndexPlayListInMovieListPage
}

// NewMockIIndexPlayListInMovieListPage creates a new mock instance
func NewMockIIndexPlayListInMovieListPage(ctrl *gomock.Controller) *MockIIndexPlayListInMovieListPage {
	mock := &MockIIndexPlayListInMovieListPage{ctrl: ctrl}
	mock.recorder = &MockIIndexPlayListInMovieListPageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIIndexPlayListInMovieListPage) EXPECT() *MockIIndexPlayListInMovieListPageMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockIIndexPlayListInMovieListPage) Find(findDTO *usecase.FindDTO) *queryService.IndexPlayListInMovieListPageDTO {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", findDTO)
	ret0, _ := ret[0].(*queryService.IndexPlayListInMovieListPageDTO)
	return ret0
}

// Find indicates an expected call of Find
func (mr *MockIIndexPlayListInMovieListPageMockRecorder) Find(findDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockIIndexPlayListInMovieListPage)(nil).Find), findDTO)
}
