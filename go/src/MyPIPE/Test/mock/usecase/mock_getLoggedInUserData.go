// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/GetLoggedInUserData.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	queryService "MyPIPE/domain/queryService"
	usecase "MyPIPE/usecase"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIGetLoggedInUserData is a mock of IGetLoggedInUserData interface
type MockIGetLoggedInUserData struct {
	ctrl     *gomock.Controller
	recorder *MockIGetLoggedInUserDataMockRecorder
}

// MockIGetLoggedInUserDataMockRecorder is the mock recorder for MockIGetLoggedInUserData
type MockIGetLoggedInUserDataMockRecorder struct {
	mock *MockIGetLoggedInUserData
}

// NewMockIGetLoggedInUserData creates a new mock instance
func NewMockIGetLoggedInUserData(ctrl *gomock.Controller) *MockIGetLoggedInUserData {
	mock := &MockIGetLoggedInUserData{ctrl: ctrl}
	mock.recorder = &MockIGetLoggedInUserDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIGetLoggedInUserData) EXPECT() *MockIGetLoggedInUserDataMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockIGetLoggedInUserData) Find(getLoggedInUserDataDTO *usecase.GetLoggedInUserDataDTO) *queryService.GetLoggedInUserDataDTO {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", getLoggedInUserDataDTO)
	ret0, _ := ret[0].(*queryService.GetLoggedInUserDataDTO)
	return ret0
}

// Find indicates an expected call of Find
func (mr *MockIGetLoggedInUserDataMockRecorder) Find(getLoggedInUserDataDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockIGetLoggedInUserData)(nil).Find), getLoggedInUserDataDTO)
}
