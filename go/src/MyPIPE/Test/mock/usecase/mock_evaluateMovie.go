// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/EvaluateMovie.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	usecase "MyPIPE/usecase"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIEvaluateMovie is a mock of IEvaluateMovie interface
type MockIEvaluateMovie struct {
	ctrl     *gomock.Controller
	recorder *MockIEvaluateMovieMockRecorder
}

// MockIEvaluateMovieMockRecorder is the mock recorder for MockIEvaluateMovie
type MockIEvaluateMovieMockRecorder struct {
	mock *MockIEvaluateMovie
}

// NewMockIEvaluateMovie creates a new mock instance
func NewMockIEvaluateMovie(ctrl *gomock.Controller) *MockIEvaluateMovie {
	mock := &MockIEvaluateMovie{ctrl: ctrl}
	mock.recorder = &MockIEvaluateMovieMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIEvaluateMovie) EXPECT() *MockIEvaluateMovieMockRecorder {
	return m.recorder
}

// EvaluateMovie mocks base method
func (m *MockIEvaluateMovie) EvaluateMovie(evaluateMovieDTO usecase.EvaluateMovieDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvaluateMovie", evaluateMovieDTO)
	ret0, _ := ret[0].(error)
	return ret0
}

// EvaluateMovie indicates an expected call of EvaluateMovie
func (mr *MockIEvaluateMovieMockRecorder) EvaluateMovie(evaluateMovieDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvaluateMovie", reflect.TypeOf((*MockIEvaluateMovie)(nil).EvaluateMovie), evaluateMovieDTO)
}
