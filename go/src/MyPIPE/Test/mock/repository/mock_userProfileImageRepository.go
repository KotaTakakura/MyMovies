// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/repository/UserProfileImageRepository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "MyPIPE/domain/model"
	gomock "github.com/golang/mock/gomock"
	multipart "mime/multipart"
	reflect "reflect"
)

// MockUserProfileImageRepository is a mock of UserProfileImageRepository interface
type MockUserProfileImageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserProfileImageRepositoryMockRecorder
}

// MockUserProfileImageRepositoryMockRecorder is the mock recorder for MockUserProfileImageRepository
type MockUserProfileImageRepositoryMockRecorder struct {
	mock *MockUserProfileImageRepository
}

// NewMockUserProfileImageRepository creates a new mock instance
func NewMockUserProfileImageRepository(ctrl *gomock.Controller) *MockUserProfileImageRepository {
	mock := &MockUserProfileImageRepository{ctrl: ctrl}
	mock.recorder = &MockUserProfileImageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserProfileImageRepository) EXPECT() *MockUserProfileImageRepositoryMockRecorder {
	return m.recorder
}

// Upload mocks base method
func (m *MockUserProfileImageRepository) Upload(file multipart.File, user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", file, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload
func (mr *MockUserProfileImageRepositoryMockRecorder) Upload(file, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockUserProfileImageRepository)(nil).Upload), file, user)
}
