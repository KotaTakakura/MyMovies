// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/repository/MovieEvaluationRepository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "MyPIPE/domain/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMovieEvaluationRepository is a mock of MovieEvaluationRepository interface
type MockMovieEvaluationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMovieEvaluationRepositoryMockRecorder
}

// MockMovieEvaluationRepositoryMockRecorder is the mock recorder for MockMovieEvaluationRepository
type MockMovieEvaluationRepositoryMockRecorder struct {
	mock *MockMovieEvaluationRepository
}

// NewMockMovieEvaluationRepository creates a new mock instance
func NewMockMovieEvaluationRepository(ctrl *gomock.Controller) *MockMovieEvaluationRepository {
	mock := &MockMovieEvaluationRepository{ctrl: ctrl}
	mock.recorder = &MockMovieEvaluationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMovieEvaluationRepository) EXPECT() *MockMovieEvaluationRepositoryMockRecorder {
	return m.recorder
}

// FindByUserIdAndMovieId mocks base method
func (m *MockMovieEvaluationRepository) FindByUserIdAndMovieId(userId model.UserID, movieId model.MovieID) *model.MovieEvaluation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserIdAndMovieId", userId, movieId)
	ret0, _ := ret[0].(*model.MovieEvaluation)
	return ret0
}

// FindByUserIdAndMovieId indicates an expected call of FindByUserIdAndMovieId
func (mr *MockMovieEvaluationRepositoryMockRecorder) FindByUserIdAndMovieId(userId, movieId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserIdAndMovieId", reflect.TypeOf((*MockMovieEvaluationRepository)(nil).FindByUserIdAndMovieId), userId, movieId)
}

// Save mocks base method
func (m *MockMovieEvaluationRepository) Save(evaluation *model.MovieEvaluation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", evaluation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockMovieEvaluationRepositoryMockRecorder) Save(evaluation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockMovieEvaluationRepository)(nil).Save), evaluation)
}

// FindByUserIdAndMovieIdAndEvaluation mocks base method
func (m *MockMovieEvaluationRepository) FindByUserIdAndMovieIdAndEvaluation(userId model.UserID, movieId model.MovieID, evaluation model.Evaluation) *model.MovieEvaluation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserIdAndMovieIdAndEvaluation", userId, movieId, evaluation)
	ret0, _ := ret[0].(*model.MovieEvaluation)
	return ret0
}

// FindByUserIdAndMovieIdAndEvaluation indicates an expected call of FindByUserIdAndMovieIdAndEvaluation
func (mr *MockMovieEvaluationRepositoryMockRecorder) FindByUserIdAndMovieIdAndEvaluation(userId, movieId, evaluation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserIdAndMovieIdAndEvaluation", reflect.TypeOf((*MockMovieEvaluationRepository)(nil).FindByUserIdAndMovieIdAndEvaluation), userId, movieId, evaluation)
}
