// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/repository/ThumbnailUploadRepository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "MyPIPE/domain/model"
	gomock "github.com/golang/mock/gomock"
	multipart "mime/multipart"
	reflect "reflect"
)

// MockThumbnailUploadRepository is a mock of ThumbnailUploadRepository interface
type MockThumbnailUploadRepository struct {
	ctrl     *gomock.Controller
	recorder *MockThumbnailUploadRepositoryMockRecorder
}

// MockThumbnailUploadRepositoryMockRecorder is the mock recorder for MockThumbnailUploadRepository
type MockThumbnailUploadRepositoryMockRecorder struct {
	mock *MockThumbnailUploadRepository
}

// NewMockThumbnailUploadRepository creates a new mock instance
func NewMockThumbnailUploadRepository(ctrl *gomock.Controller) *MockThumbnailUploadRepository {
	mock := &MockThumbnailUploadRepository{ctrl: ctrl}
	mock.recorder = &MockThumbnailUploadRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockThumbnailUploadRepository) EXPECT() *MockThumbnailUploadRepositoryMockRecorder {
	return m.recorder
}

// Upload mocks base method
func (m *MockThumbnailUploadRepository) Upload(file multipart.File, movie model.Movie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", file, movie)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload
func (mr *MockThumbnailUploadRepositoryMockRecorder) Upload(file, movie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockThumbnailUploadRepository)(nil).Upload), file, movie)
}
