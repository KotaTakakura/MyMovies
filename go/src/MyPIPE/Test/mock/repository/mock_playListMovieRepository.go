// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/repository/PlayListMovieRepository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "MyPIPE/domain/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPlayListMovieRepository is a mock of PlayListMovieRepository interface
type MockPlayListMovieRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPlayListMovieRepositoryMockRecorder
}

// MockPlayListMovieRepositoryMockRecorder is the mock recorder for MockPlayListMovieRepository
type MockPlayListMovieRepositoryMockRecorder struct {
	mock *MockPlayListMovieRepository
}

// NewMockPlayListMovieRepository creates a new mock instance
func NewMockPlayListMovieRepository(ctrl *gomock.Controller) *MockPlayListMovieRepository {
	mock := &MockPlayListMovieRepository{ctrl: ctrl}
	mock.recorder = &MockPlayListMovieRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPlayListMovieRepository) EXPECT() *MockPlayListMovieRepositoryMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockPlayListMovieRepository) Find(userId model.UserID, playListId model.PlayListID, movieId model.MovieID) *model.PlayListMovie {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", userId, playListId, movieId)
	ret0, _ := ret[0].(*model.PlayListMovie)
	return ret0
}

// Find indicates an expected call of Find
func (mr *MockPlayListMovieRepositoryMockRecorder) Find(userId, playListId, movieId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockPlayListMovieRepository)(nil).Find), userId, playListId, movieId)
}

// FindAll mocks base method
func (m *MockPlayListMovieRepository) FindAll(userId model.UserID, playListId model.PlayListID) []model.PlayListMovie {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", userId, playListId)
	ret0, _ := ret[0].([]model.PlayListMovie)
	return ret0
}

// FindAll indicates an expected call of FindAll
func (mr *MockPlayListMovieRepositoryMockRecorder) FindAll(userId, playListId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockPlayListMovieRepository)(nil).FindAll), userId, playListId)
}

// Save mocks base method
func (m *MockPlayListMovieRepository) Save(playListMovie *model.PlayListMovie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", playListMovie)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockPlayListMovieRepositoryMockRecorder) Save(playListMovie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockPlayListMovieRepository)(nil).Save), playListMovie)
}

// Remove mocks base method
func (m *MockPlayListMovieRepository) Remove(arg0 *model.PlayListMovie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockPlayListMovieRepositoryMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockPlayListMovieRepository)(nil).Remove), arg0)
}

// SaveAll mocks base method
func (m *MockPlayListMovieRepository) SaveAll(arg0 []model.PlayListMovie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAll", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAll indicates an expected call of SaveAll
func (mr *MockPlayListMovieRepositoryMockRecorder) SaveAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAll", reflect.TypeOf((*MockPlayListMovieRepository)(nil).SaveAll), arg0)
}
