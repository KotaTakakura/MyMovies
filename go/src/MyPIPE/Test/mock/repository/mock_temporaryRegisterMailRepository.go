// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/repository/TemporaryRegisterMailRepository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "MyPIPE/domain/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTemporaryRegisterMailRepository is a mock of TemporaryRegisterMailRepository interface
type MockTemporaryRegisterMailRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTemporaryRegisterMailRepositoryMockRecorder
}

// MockTemporaryRegisterMailRepositoryMockRecorder is the mock recorder for MockTemporaryRegisterMailRepository
type MockTemporaryRegisterMailRepositoryMockRecorder struct {
	mock *MockTemporaryRegisterMailRepository
}

// NewMockTemporaryRegisterMailRepository creates a new mock instance
func NewMockTemporaryRegisterMailRepository(ctrl *gomock.Controller) *MockTemporaryRegisterMailRepository {
	mock := &MockTemporaryRegisterMailRepository{ctrl: ctrl}
	mock.recorder = &MockTemporaryRegisterMailRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTemporaryRegisterMailRepository) EXPECT() *MockTemporaryRegisterMailRepositoryMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockTemporaryRegisterMailRepository) Send(mail *model.TemporaryRegisterMail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", mail)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockTemporaryRegisterMailRepositoryMockRecorder) Send(mail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockTemporaryRegisterMailRepository)(nil).Send), mail)
}
