// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/repository/FollowUserRepository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "MyPIPE/domain/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFollowUserRepository is a mock of FollowUserRepository interface
type MockFollowUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFollowUserRepositoryMockRecorder
}

// MockFollowUserRepositoryMockRecorder is the mock recorder for MockFollowUserRepository
type MockFollowUserRepositoryMockRecorder struct {
	mock *MockFollowUserRepository
}

// NewMockFollowUserRepository creates a new mock instance
func NewMockFollowUserRepository(ctrl *gomock.Controller) *MockFollowUserRepository {
	mock := &MockFollowUserRepository{ctrl: ctrl}
	mock.recorder = &MockFollowUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFollowUserRepository) EXPECT() *MockFollowUserRepositoryMockRecorder {
	return m.recorder
}

// FindByUserIdAndFollowId mocks base method
func (m *MockFollowUserRepository) FindByUserIdAndFollowId(userId, followId model.UserID) *model.FollowUser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserIdAndFollowId", userId, followId)
	ret0, _ := ret[0].(*model.FollowUser)
	return ret0
}

// FindByUserIdAndFollowId indicates an expected call of FindByUserIdAndFollowId
func (mr *MockFollowUserRepositoryMockRecorder) FindByUserIdAndFollowId(userId, followId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserIdAndFollowId", reflect.TypeOf((*MockFollowUserRepository)(nil).FindByUserIdAndFollowId), userId, followId)
}

// Save mocks base method
func (m *MockFollowUserRepository) Save(user *model.FollowUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockFollowUserRepositoryMockRecorder) Save(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockFollowUserRepository)(nil).Save), user)
}
